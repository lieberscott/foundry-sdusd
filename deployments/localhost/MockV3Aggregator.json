{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x91f2fec8c9ce64d93b87c42596e1788920817f9b5566ff532f4cd49f5f7f65f1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "696153",
    "logsBloom": "0x
    "blockHash": "0xc8a825c1bab78df446c84d4572a6f6249e36b19cf4ac93b598092e8720c31ce4",
    "transactionHash": "0x91f2fec8c9ce64d93b87c42596e1788920817f9b5566ff532f4cd49f5f7f65f1",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "696153",
    "status": 1,
    "byzantium": true
  },
  "args": [
    8,
    200000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "6307baaff1593ca7f3056caa34bee747",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/test/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator {\\n    uint256 public constant version = 4;\\n\\n    uint8 public decimals;\\n    int256 public latestAnswer;\\n    uint256 public latestTimestamp;\\n    uint256 public latestRound;\\n\\n    mapping(uint256 => int256) public getAnswer;\\n    mapping(uint256 => uint256) public getTimestamp;\\n    mapping(uint256 => uint256) private getStartedAt;\\n\\n    constructor(uint8 _decimals, int256 _initialAnswer) {\\n        decimals = _decimals;\\n        updateAnswer(_initialAnswer);\\n    }\\n\\n    function updateAnswer(int256 _answer) public {\\n        latestAnswer = _answer;\\n        latestTimestamp = block.timestamp;\\n        latestRound++;\\n        getAnswer[latestRound] = _answer;\\n        getTimestamp[latestRound] = block.timestamp;\\n        getStartedAt[latestRound] = block.timestamp;\\n    }\\n\\n    function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\\n        latestRound = _roundId;\\n        latestAnswer = _answer;\\n        latestTimestamp = _timestamp;\\n        getAnswer[latestRound] = _answer;\\n        getTimestamp[latestRound] = _timestamp;\\n        getStartedAt[latestRound] = _startedAt;\\n    }\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n    {\\n        return (\\n            uint80(latestRound),\\n            getAnswer[latestRound],\\n            getStartedAt[latestRound],\\n            getTimestamp[latestRound],\\n            uint80(latestRound)\\n        );\\n    }\\n\\n    function description() external pure returns (string memory) {\\n        return \\\"v0.6/test/mock/MockV3Aggregator.sol\\\";\\n    }\\n}\",\"keccak256\":\"0x06c668ca0b444384c5dee3b208cec5b95a05c6f961ea729cf3c86e3e33066436\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610aca380380610aca8339818101604052810190610032919061014d565b816000806101000a81548160ff021916908360ff16021790555061005b8161006260201b60201c565b505061020e565b806001819055504260028190555060036000815480929190610083906101c6565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b600080fd5b600060ff82169050919050565b6100f4816100de565b81146100ff57600080fd5b50565b600081519050610111816100eb565b92915050565b6000819050919050565b61012a81610117565b811461013557600080fd5b50565b60008151905061014781610121565b92915050565b60008060408385031215610164576101636100d9565b5b600061017285828601610102565b925050602061018385828601610138565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006101d1826101bc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036102035761020261018d565b5b600182019050919050565b6108ad8061021d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638205bf6a116100715780638205bf6a1461016b5780639a6fc8f514610189578063a87a20ce146101bd578063b5ab58dc146101d9578063b633620c14610209578063feaf968c14610239576100b4565b8063313ce567146100b95780634aa2011f146100d757806350d25bcd146100f357806354fd4d5014610111578063668a0f021461012f5780637284e4161461014d575b600080fd5b6100c161025b565b6040516100ce91906104b9565b60405180910390f35b6100f160048036038101906100ec9190610587565b61026c565b005b6100fb6102e1565b60405161010891906105fd565b60405180910390f35b6101196102e7565b6040516101269190610627565b60405180910390f35b6101376102ec565b6040516101449190610627565b60405180910390f35b6101556102f2565b60405161016291906106d2565b60405180910390f35b610173610312565b6040516101809190610627565b60405180910390f35b6101a3600480360381019061019e91906106f4565b610318565b6040516101b4959493929190610730565b60405180910390f35b6101d760048036038101906101d29190610783565b610395565b005b6101f360048036038101906101ee91906107b0565b61040c565b60405161020091906105fd565b60405180910390f35b610223600480360381019061021e91906107b0565b610424565b6040516102309190610627565b60405180910390f35b61024161043c565b604051610252959493929190610730565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600481565b60035481565b606060405180606001604052806023815260200161085560239139905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b8060018190555042600281905550600360008154809291906103b69061080c565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b600060ff82169050919050565b6104b38161049d565b82525050565b60006020820190506104ce60008301846104aa565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6104f8816104d9565b811461050357600080fd5b50565b600081359050610515816104ef565b92915050565b6000819050919050565b61052e8161051b565b811461053957600080fd5b50565b60008135905061054b81610525565b92915050565b6000819050919050565b61056481610551565b811461056f57600080fd5b50565b6000813590506105818161055b565b92915050565b600080600080608085870312156105a1576105a06104d4565b5b60006105af87828801610506565b94505060206105c08782880161053c565b93505060406105d187828801610572565b92505060606105e287828801610572565b91505092959194509250565b6105f78161051b565b82525050565b600060208201905061061260008301846105ee565b92915050565b61062181610551565b82525050565b600060208201905061063c6000830184610618565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561067c578082015181840152602081019050610661565b60008484015250505050565b6000601f19601f8301169050919050565b60006106a482610642565b6106ae818561064d565b93506106be81856020860161065e565b6106c781610688565b840191505092915050565b600060208201905081810360008301526106ec8184610699565b905092915050565b60006020828403121561070a576107096104d4565b5b600061071884828501610506565b91505092915050565b61072a816104d9565b82525050565b600060a0820190506107456000830188610721565b61075260208301876105ee565b61075f6040830186610618565b61076c6060830185610618565b6107796080830184610721565b9695505050505050565b600060208284031215610799576107986104d4565b5b60006107a78482850161053c565b91505092915050565b6000602082840312156107c6576107c56104d4565b5b60006107d484828501610572565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061081782610551565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610849576108486107dd565b5b60018201905091905056fe76302e362f746573742f6d6f636b2f4d6f636b563341676772656761746f722e736f6ca26469706673582212206f9c136ae79ca33df8df39369a6cb48b3e7e64ef568e555f194351854709c01764736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638205bf6a116100715780638205bf6a1461016b5780639a6fc8f514610189578063a87a20ce146101bd578063b5ab58dc146101d9578063b633620c14610209578063feaf968c14610239576100b4565b8063313ce567146100b95780634aa2011f146100d757806350d25bcd146100f357806354fd4d5014610111578063668a0f021461012f5780637284e4161461014d575b600080fd5b6100c161025b565b6040516100ce91906104b9565b60405180910390f35b6100f160048036038101906100ec9190610587565b61026c565b005b6100fb6102e1565b60405161010891906105fd565b60405180910390f35b6101196102e7565b6040516101269190610627565b60405180910390f35b6101376102ec565b6040516101449190610627565b60405180910390f35b6101556102f2565b60405161016291906106d2565b60405180910390f35b610173610312565b6040516101809190610627565b60405180910390f35b6101a3600480360381019061019e91906106f4565b610318565b6040516101b4959493929190610730565b60405180910390f35b6101d760048036038101906101d29190610783565b610395565b005b6101f360048036038101906101ee91906107b0565b61040c565b60405161020091906105fd565b60405180910390f35b610223600480360381019061021e91906107b0565b610424565b6040516102309190610627565b60405180910390f35b61024161043c565b604051610252959493929190610730565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600481565b60035481565b606060405180606001604052806023815260200161085560239139905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b8060018190555042600281905550600360008154809291906103b69061080c565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b600060ff82169050919050565b6104b38161049d565b82525050565b60006020820190506104ce60008301846104aa565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6104f8816104d9565b811461050357600080fd5b50565b600081359050610515816104ef565b92915050565b6000819050919050565b61052e8161051b565b811461053957600080fd5b50565b60008135905061054b81610525565b92915050565b6000819050919050565b61056481610551565b811461056f57600080fd5b50565b6000813590506105818161055b565b92915050565b600080600080608085870312156105a1576105a06104d4565b5b60006105af87828801610506565b94505060206105c08782880161053c565b93505060406105d187828801610572565b92505060606105e287828801610572565b91505092959194509250565b6105f78161051b565b82525050565b600060208201905061061260008301846105ee565b92915050565b61062181610551565b82525050565b600060208201905061063c6000830184610618565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561067c578082015181840152602081019050610661565b60008484015250505050565b6000601f19601f8301169050919050565b60006106a482610642565b6106ae818561064d565b93506106be81856020860161065e565b6106c781610688565b840191505092915050565b600060208201905081810360008301526106ec8184610699565b905092915050565b60006020828403121561070a576107096104d4565b5b600061071884828501610506565b91505092915050565b61072a816104d9565b82525050565b600060a0820190506107456000830188610721565b61075260208301876105ee565b61075f6040830186610618565b61076c6060830185610618565b6107796080830184610721565b9695505050505050565b600060208284031215610799576107986104d4565b5b60006107a78482850161053c565b91505092915050565b6000602082840312156107c6576107c56104d4565b5b60006107d484828501610572565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061081782610551565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610849576108486107dd565b5b60018201905091905056fe76302e362f746573742f6d6f636b2f4d6f636b563341676772656761746f722e736f6ca26469706673582212206f9c136ae79ca33df8df39369a6cb48b3e7e64ef568e555f194351854709c01764736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "MockV3Aggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16977,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 16979,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 16981,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16983,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16987,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 16991,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16995,
        "contract": "contracts/test/MockV3Aggregator.sol:MockV3Aggregator",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}