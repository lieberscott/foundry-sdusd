{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateArt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e55ade187a09e33ca1ee2a1c94870db51b2e69cb2415ff53c0aeac57b25388e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1056422",
    "logsBloom": "0x
    "blockHash": "0x09b840d66b151b1652d820b22cbd0f74262b0298ade6127899f742b3d8850e76",
    "transactionHash": "0x4e55ade187a09e33ca1ee2a1c94870db51b2e69cb2415ff53c0aeac57b25388e",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1056422",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "16da53f6e23b40334c163eb4e3662495",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateArt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"generateArt(uint256)\":{\"details\":\"Generate 3 lines:    1) [emojiLeft] SDNFT [emojiRight]   2) [emojiLeft] No. XXXXX [emojiRight]   3) [emojiLeft] 10,000 Votes [emojiRight] Where each ASCII text is centered within ASCII_WIDTH, and emojis simply wrap around (no truncation on the final line).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Algo.sol\":\"Algo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Algo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Algo {\\n    // Emoji range [U+1F300..U+1F5FF]\\n    uint32 constant EMOJI_START = 0x1F300;\\n    uint32 constant EMOJI_END   = 0x1F5FF;\\n    uint32 constant EMOJI_SIZE  = EMOJI_END - EMOJI_START + 1;\\n\\n    // Width for the ASCII text portion\\n    uint256 constant ASCII_WIDTH = 16;\\n\\n    /**\\n     * @dev Generate 3 lines:\\n     * \\n     *   1) [emojiLeft] SDNFT [emojiRight]\\n     *   2) [emojiLeft] No. XXXXX [emojiRight]\\n     *   3) [emojiLeft] 10,000 Votes [emojiRight]\\n     *\\n     * Where each ASCII text is centered within ASCII_WIDTH,\\n     * and emojis simply wrap around (no truncation on the final line).\\n     */\\n    function generateArt(uint256 tokenId) public pure returns (string memory) {\\n        // Pseudorandom seed\\n        uint256 rand = uint256(keccak256(abi.encodePacked(\\\"MySalt\\\", tokenId)));\\n\\n        // We\\u2019ll build the final string line by line\\n        bytes memory output;\\n\\n        // LINE 1: \\\"SDNFT\\\"\\n        {\\n            // 1. Pick 2 random emojis\\n            (bytes memory left, uint256 rand2) = pickEmoji(rand);\\n            (bytes memory right, uint256 rand3) = pickEmoji(rand2);\\n            rand = rand3;\\n\\n            // 2. Center the ASCII portion\\n            string memory asciiText = centerASCII(\\\"SDNFT\\\", ASCII_WIDTH);\\n\\n            // 3. Combine: leftEmoji + asciiText + rightEmoji + newline\\n            bytes memory line = abi.encodePacked(left, asciiText, right, \\\"\\\\n\\\");\\n            output = abi.encodePacked(output, line);\\n        }\\n\\n        // LINE 2: \\\"No. XXXXX\\\"\\n        {\\n            (bytes memory left, uint256 rand2) = pickEmoji(rand);\\n            (bytes memory right, uint256 rand3) = pickEmoji(rand2);\\n            rand = rand3;\\n\\n            // ASCII text includes the tokenId\\n            string memory asciiText = string(\\n                abi.encodePacked(\\\"No. \\\", toString(tokenId))\\n            );\\n            asciiText = centerASCII(asciiText, ASCII_WIDTH);\\n\\n            bytes memory line = abi.encodePacked(left, asciiText, right, \\\"\\\\n\\\");\\n            output = abi.encodePacked(output, line);\\n        }\\n\\n        // LINE 3: \\\"10,000 Votes\\\"\\n        {\\n            (bytes memory left, uint256 rand2) = pickEmoji(rand);\\n            (bytes memory right, uint256 rand3) = pickEmoji(rand2);\\n            rand = rand3;\\n\\n            string memory asciiText = centerASCII(\\\"10,000 Votes\\\", ASCII_WIDTH);\\n\\n            bytes memory line = abi.encodePacked(left, asciiText, right, \\\"\\\\n\\\");\\n            output = abi.encodePacked(output, line);\\n        }\\n\\n        // Convert the final buffer to a string\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev pickEmoji: returns a random emoji (in UTF-8 bytes) plus updated rand.\\n     */\\n    function pickEmoji(uint256 rand)\\n        internal\\n        pure\\n        returns (bytes memory emojiBytes, uint256 newRand)\\n    {\\n        uint256 idx = rand % EMOJI_SIZE;\\n        uint32 codePoint = EMOJI_START + uint32(idx);\\n\\n        // Shift bits for the next call\\n        newRand = rand >> 16;\\n\\n        // Encode to UTF-8\\n        emojiBytes = utf8Encode(codePoint);\\n    }\\n\\n    /**\\n     * @dev centerASCII: center an ASCII string in `width`, by adding spaces on both sides.\\n     *      If the string is longer than `width`, we can truncate *only* ASCII text.\\n     *      This avoids slicing multi-byte emojis, since emojis aren\\u2019t included here.\\n     */\\n    function centerASCII(string memory text, uint256 width) internal pure returns (string memory) {\\n        bytes memory raw = bytes(text);\\n        if (raw.length >= width) {\\n            // If it's too long, truncate at width (safe for ASCII)\\n            bytes memory truncated = new bytes(width);\\n            for (uint256 i = 0; i < width; i++) {\\n                truncated[i] = raw[i];\\n            }\\n            return string(truncated);\\n        }\\n\\n        // Otherwise, left-pad and right-pad with spaces\\n        uint256 totalSpaces = width - raw.length;\\n        uint256 leftSpaces = totalSpaces / 2;\\n        uint256 rightSpaces = totalSpaces - leftSpaces;\\n\\n        return string(abi.encodePacked(\\n            repeatSpace(leftSpaces),\\n            text,\\n            repeatSpace(rightSpaces)\\n        ));\\n    }\\n\\n    // Repeat N spaces\\n    function repeatSpace(uint256 count) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(count);\\n        for (uint256 i = 0; i < count; i++) {\\n            buffer[i] = 0x20; // space\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev UTF-8 encode a single code point (e.g., emoji).\\n     */\\n    function utf8Encode(uint32 cp) internal pure returns (bytes memory) {\\n        require(cp <= 0x10FFFF && (cp < 0xD800 || cp > 0xDFFF), \\\"Invalid codepoint\\\");\\n\\n        if (cp <= 0x7F) {\\n            bytes memory b = new bytes(1);\\n            b[0] = bytes1(uint8(cp));\\n            return b;\\n        } else if (cp <= 0x7FF) {\\n            bytes memory b = new bytes(2);\\n            b[0] = bytes1(uint8(0xC0 | (cp >> 6)));\\n            b[1] = bytes1(uint8(0x80 | (cp & 0x3F)));\\n            return b;\\n        } else if (cp <= 0xFFFF) {\\n            bytes memory b = new bytes(3);\\n            b[0] = bytes1(uint8(0xE0 | (cp >> 12)));\\n            b[1] = bytes1(uint8(0x80 | ((cp >> 6) & 0x3F)));\\n            b[2] = bytes1(uint8(0x80 | (cp & 0x3F)));\\n            return b;\\n        } else {\\n            bytes memory b = new bytes(4);\\n            b[0] = bytes1(uint8(0xF0 | (cp >> 18)));\\n            b[1] = bytes1(uint8(0x80 | ((cp >> 12) & 0x3F)));\\n            b[2] = bytes1(uint8(0x80 | ((cp >> 6) & 0x3F)));\\n            b[3] = bytes1(uint8(0x80 | (cp & 0x3F)));\\n            return b;\\n        }\\n    }\\n\\n    // Convert uint to string (decimal); use OZ Strings for production\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + (value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x6a0361cb71ec225959fcd2a5a5aba2f6973dbc2d829b562306b18babebb54ee2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506112368061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dd3814d214610030575b600080fd5b61004a60048036038101906100459190610c06565b610060565b6040516100579190610cc3565b60405180910390f35b60606000826040516020016100759190610d5d565b6040516020818303038152906040528051906020012060001c9050606060008061009e846102bc565b915091506000806100ae836102bc565b9150915080955060006100f76040518060400160405280600581526020017f53444e4654000000000000000000000000000000000000000000000000000000815250601061031e565b9050600085828560405160200161011093929190610e47565b60405160208183030381529060405290508681604051602001610134929190610e83565b6040516020818303038152906040529650505050505050600080610157846102bc565b91509150600080610167836102bc565b91509150809550600061017989610474565b6040516020016101899190610ef3565b60405160208183030381529060405290506101a581601061031e565b905060008582856040516020016101be93929190610e47565b604051602081830303815290604052905086816040516020016101e2929190610e83565b6040516020818303038152906040529650505050505050600080610205846102bc565b91509150600080610215836102bc565b91509150809550600061025e6040518060400160405280600c81526020017f31302c30303020566f7465730000000000000000000000000000000000000000815250601061031e565b9050600085828560405160200161027793929190610e47565b6040516020818303038152906040529050868160405160200161029b929190610e83565b60405160208183030381529060405296505050505050508092505050919050565b606060008060016201f3006201f5ff6102d59190610f54565b6102df9190610f8c565b63ffffffff16846102f09190610ff3565b90506000816201f3006103039190610f8c565b9050601085901c9250610315816105d4565b93505050915091565b60606000839050828151106104015760008367ffffffffffffffff81111561034957610348611024565b5b6040519080825280601f01601f19166020018201604052801561037b5781602001600182028036833780820191505090505b50905060005b848110156103f65782818151811061039c5761039b611053565b5b602001015160f81c60f81b8282815181106103ba576103b9611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610381565b50809250505061046e565b60008151846104109190611082565b9050600060028261042191906110b6565b9050600081836104319190611082565b905061043c82610b0f565b8761044683610b0f565b604051602001610458939291906110e7565b6040516020818303038152906040529450505050505b92915050565b6060600082036104bb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506105cf565b600082905060005b600082146104ed5780806104d690611118565b915050600a826104e691906110b6565b91506104c3565b60008167ffffffffffffffff81111561050957610508611024565b5b6040519080825280601f01601f19166020018201604052801561053b5781602001600182028036833780820191505090505b5090505b600085146105c8576001826105549190611082565b9150600a856105639190610ff3565b603061056f9190611160565b60f81b81838151811061058557610584611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856105c191906110b6565b945061053f565b8093505050505b919050565b60606210ffff8263ffffffff1611158015610608575061d8008263ffffffff161080610607575061dfff8263ffffffff16115b5b610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e906111e0565b60405180910390fd5b607f8263ffffffff16116106f7576000600167ffffffffffffffff81111561067257610671611024565b5b6040519080825280601f01601f1916602001820160405280156106a45781602001600182028036833780820191505090505b5090508260f81b816000815181106106bf576106be611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b6107ff8263ffffffff1611610802576000600267ffffffffffffffff81111561072357610722611024565b5b6040519080825280601f01601f1916602001820160405280156107555781602001600182028036833780820191505090505b50905060068363ffffffff16901c60c01760f81b8160008151811061077d5761077c611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b816001815181106107ca576107c9611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b61ffff8263ffffffff1611610964576000600367ffffffffffffffff81111561082e5761082d611024565b5b6040519080825280601f01601f1916602001820160405280156108605781602001600182028036833780820191505090505b509050600c8363ffffffff16901c60e01760f81b8160008151811061088857610887611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f60068463ffffffff16901c1660801760f81b816001815181106108df576108de611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b8160028151811061092c5761092b611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b6000600467ffffffffffffffff81111561098157610980611024565b5b6040519080825280601f01601f1916602001820160405280156109b35781602001600182028036833780820191505090505b50905060128363ffffffff16901c60f01760f81b816000815181106109db576109da611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f600c8463ffffffff16901c1660801760f81b81600181518110610a3257610a31611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f60068463ffffffff16901c1660801760f81b81600281518110610a8957610a88611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b81600381518110610ad657610ad5611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350809150505b919050565b606060008267ffffffffffffffff811115610b2d57610b2c611024565b5b6040519080825280601f01601f191660200182016040528015610b5f5781602001600182028036833780820191505090505b50905060005b83811015610bc157602060f81b828281518110610b8557610b84611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610b65565b5080915050919050565b600080fd5b6000819050919050565b610be381610bd0565b8114610bee57600080fd5b50565b600081359050610c0081610bda565b92915050565b600060208284031215610c1c57610c1b610bcb565b5b6000610c2a84828501610bf1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c6d578082015181840152602081019050610c52565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c9582610c33565b610c9f8185610c3e565b9350610caf818560208601610c4f565b610cb881610c79565b840191505092915050565b60006020820190508181036000830152610cdd8184610c8a565b905092915050565b600081905092915050565b7f4d7953616c740000000000000000000000000000000000000000000000000000600082015250565b6000610d26600683610ce5565b9150610d3182610cf0565b600682019050919050565b6000819050919050565b610d57610d5282610bd0565b610d3c565b82525050565b6000610d6882610d19565b9150610d748284610d46565b60208201915081905092915050565b600081519050919050565b600081905092915050565b6000610da482610d83565b610dae8185610d8e565b9350610dbe818560208601610c4f565b80840191505092915050565b6000610dd582610c33565b610ddf8185610ce5565b9350610def818560208601610c4f565b80840191505092915050565b7f0a00000000000000000000000000000000000000000000000000000000000000600082015250565b6000610e31600183610ce5565b9150610e3c82610dfb565b600182019050919050565b6000610e538286610d99565b9150610e5f8285610dca565b9150610e6b8284610d99565b9150610e7682610e24565b9150819050949350505050565b6000610e8f8285610d99565b9150610e9b8284610d99565b91508190509392505050565b7f4e6f2e2000000000000000000000000000000000000000000000000000000000600082015250565b6000610edd600483610ce5565b9150610ee882610ea7565b600482019050919050565b6000610efe82610ed0565b9150610f0a8284610dca565b915081905092915050565b600063ffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5f82610f15565b9150610f6a83610f15565b9250828203905063ffffffff811115610f8657610f85610f25565b5b92915050565b6000610f9782610f15565b9150610fa283610f15565b9250828201905063ffffffff811115610fbe57610fbd610f25565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ffe82610bd0565b915061100983610bd0565b92508261101957611018610fc4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061108d82610bd0565b915061109883610bd0565b92508282039050818111156110b0576110af610f25565b5b92915050565b60006110c182610bd0565b91506110cc83610bd0565b9250826110dc576110db610fc4565b5b828204905092915050565b60006110f38286610dca565b91506110ff8285610dca565b915061110b8284610dca565b9150819050949350505050565b600061112382610bd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361115557611154610f25565b5b600182019050919050565b600061116b82610bd0565b915061117683610bd0565b925082820190508082111561118e5761118d610f25565b5b92915050565b7f496e76616c696420636f6465706f696e74000000000000000000000000000000600082015250565b60006111ca601183610c3e565b91506111d582611194565b602082019050919050565b600060208201905081810360008301526111f9816111bd565b905091905056fea264697066735822122019aa297e2ddda10d0b2ce355925135a10c1abebb218081351f5282d2edb916e864736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dd3814d214610030575b600080fd5b61004a60048036038101906100459190610c06565b610060565b6040516100579190610cc3565b60405180910390f35b60606000826040516020016100759190610d5d565b6040516020818303038152906040528051906020012060001c9050606060008061009e846102bc565b915091506000806100ae836102bc565b9150915080955060006100f76040518060400160405280600581526020017f53444e4654000000000000000000000000000000000000000000000000000000815250601061031e565b9050600085828560405160200161011093929190610e47565b60405160208183030381529060405290508681604051602001610134929190610e83565b6040516020818303038152906040529650505050505050600080610157846102bc565b91509150600080610167836102bc565b91509150809550600061017989610474565b6040516020016101899190610ef3565b60405160208183030381529060405290506101a581601061031e565b905060008582856040516020016101be93929190610e47565b604051602081830303815290604052905086816040516020016101e2929190610e83565b6040516020818303038152906040529650505050505050600080610205846102bc565b91509150600080610215836102bc565b91509150809550600061025e6040518060400160405280600c81526020017f31302c30303020566f7465730000000000000000000000000000000000000000815250601061031e565b9050600085828560405160200161027793929190610e47565b6040516020818303038152906040529050868160405160200161029b929190610e83565b60405160208183030381529060405296505050505050508092505050919050565b606060008060016201f3006201f5ff6102d59190610f54565b6102df9190610f8c565b63ffffffff16846102f09190610ff3565b90506000816201f3006103039190610f8c565b9050601085901c9250610315816105d4565b93505050915091565b60606000839050828151106104015760008367ffffffffffffffff81111561034957610348611024565b5b6040519080825280601f01601f19166020018201604052801561037b5781602001600182028036833780820191505090505b50905060005b848110156103f65782818151811061039c5761039b611053565b5b602001015160f81c60f81b8282815181106103ba576103b9611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610381565b50809250505061046e565b60008151846104109190611082565b9050600060028261042191906110b6565b9050600081836104319190611082565b905061043c82610b0f565b8761044683610b0f565b604051602001610458939291906110e7565b6040516020818303038152906040529450505050505b92915050565b6060600082036104bb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506105cf565b600082905060005b600082146104ed5780806104d690611118565b915050600a826104e691906110b6565b91506104c3565b60008167ffffffffffffffff81111561050957610508611024565b5b6040519080825280601f01601f19166020018201604052801561053b5781602001600182028036833780820191505090505b5090505b600085146105c8576001826105549190611082565b9150600a856105639190610ff3565b603061056f9190611160565b60f81b81838151811061058557610584611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856105c191906110b6565b945061053f565b8093505050505b919050565b60606210ffff8263ffffffff1611158015610608575061d8008263ffffffff161080610607575061dfff8263ffffffff16115b5b610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e906111e0565b60405180910390fd5b607f8263ffffffff16116106f7576000600167ffffffffffffffff81111561067257610671611024565b5b6040519080825280601f01601f1916602001820160405280156106a45781602001600182028036833780820191505090505b5090508260f81b816000815181106106bf576106be611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b6107ff8263ffffffff1611610802576000600267ffffffffffffffff81111561072357610722611024565b5b6040519080825280601f01601f1916602001820160405280156107555781602001600182028036833780820191505090505b50905060068363ffffffff16901c60c01760f81b8160008151811061077d5761077c611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b816001815181106107ca576107c9611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b61ffff8263ffffffff1611610964576000600367ffffffffffffffff81111561082e5761082d611024565b5b6040519080825280601f01601f1916602001820160405280156108605781602001600182028036833780820191505090505b509050600c8363ffffffff16901c60e01760f81b8160008151811061088857610887611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f60068463ffffffff16901c1660801760f81b816001815181106108df576108de611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b8160028151811061092c5761092b611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080915050610b0a565b6000600467ffffffffffffffff81111561098157610980611024565b5b6040519080825280601f01601f1916602001820160405280156109b35781602001600182028036833780820191505090505b50905060128363ffffffff16901c60f01760f81b816000815181106109db576109da611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f600c8463ffffffff16901c1660801760f81b81600181518110610a3257610a31611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f60068463ffffffff16901c1660801760f81b81600281518110610a8957610a88611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350603f831660801760f81b81600381518110610ad657610ad5611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350809150505b919050565b606060008267ffffffffffffffff811115610b2d57610b2c611024565b5b6040519080825280601f01601f191660200182016040528015610b5f5781602001600182028036833780820191505090505b50905060005b83811015610bc157602060f81b828281518110610b8557610b84611053565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610b65565b5080915050919050565b600080fd5b6000819050919050565b610be381610bd0565b8114610bee57600080fd5b50565b600081359050610c0081610bda565b92915050565b600060208284031215610c1c57610c1b610bcb565b5b6000610c2a84828501610bf1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c6d578082015181840152602081019050610c52565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c9582610c33565b610c9f8185610c3e565b9350610caf818560208601610c4f565b610cb881610c79565b840191505092915050565b60006020820190508181036000830152610cdd8184610c8a565b905092915050565b600081905092915050565b7f4d7953616c740000000000000000000000000000000000000000000000000000600082015250565b6000610d26600683610ce5565b9150610d3182610cf0565b600682019050919050565b6000819050919050565b610d57610d5282610bd0565b610d3c565b82525050565b6000610d6882610d19565b9150610d748284610d46565b60208201915081905092915050565b600081519050919050565b600081905092915050565b6000610da482610d83565b610dae8185610d8e565b9350610dbe818560208601610c4f565b80840191505092915050565b6000610dd582610c33565b610ddf8185610ce5565b9350610def818560208601610c4f565b80840191505092915050565b7f0a00000000000000000000000000000000000000000000000000000000000000600082015250565b6000610e31600183610ce5565b9150610e3c82610dfb565b600182019050919050565b6000610e538286610d99565b9150610e5f8285610dca565b9150610e6b8284610d99565b9150610e7682610e24565b9150819050949350505050565b6000610e8f8285610d99565b9150610e9b8284610d99565b91508190509392505050565b7f4e6f2e2000000000000000000000000000000000000000000000000000000000600082015250565b6000610edd600483610ce5565b9150610ee882610ea7565b600482019050919050565b6000610efe82610ed0565b9150610f0a8284610dca565b915081905092915050565b600063ffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5f82610f15565b9150610f6a83610f15565b9250828203905063ffffffff811115610f8657610f85610f25565b5b92915050565b6000610f9782610f15565b9150610fa283610f15565b9250828201905063ffffffff811115610fbe57610fbd610f25565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ffe82610bd0565b915061100983610bd0565b92508261101957611018610fc4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061108d82610bd0565b915061109883610bd0565b92508282039050818111156110b0576110af610f25565b5b92915050565b60006110c182610bd0565b91506110cc83610bd0565b9250826110dc576110db610fc4565b5b828204905092915050565b60006110f38286610dca565b91506110ff8285610dca565b915061110b8284610dca565b9150819050949350505050565b600061112382610bd0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361115557611154610f25565b5b600182019050919050565b600061116b82610bd0565b915061117683610bd0565b925082820190508082111561118e5761118d610f25565b5b92915050565b7f496e76616c696420636f6465706f696e74000000000000000000000000000000600082015250565b60006111ca601183610c3e565b91506111d582611194565b602082019050919050565b600060208201905081810360008301526111f9816111bd565b905091905056fea264697066735822122019aa297e2ddda10d0b2ce355925135a10c1abebb218081351f5282d2edb916e864736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "generateArt(uint256)": {
        "details": "Generate 3 lines:    1) [emojiLeft] SDNFT [emojiRight]   2) [emojiLeft] No. XXXXX [emojiRight]   3) [emojiLeft] 10,000 Votes [emojiRight] Where each ASCII text is centered within ASCII_WIDTH, and emojis simply wrap around (no truncation on the final line)."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}